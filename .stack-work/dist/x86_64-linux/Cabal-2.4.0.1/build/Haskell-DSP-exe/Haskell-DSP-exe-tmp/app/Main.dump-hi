
==================== FINAL INTERFACE ====================
2018-12-30 17:48:14.623021241 UTC

interface main:Main 8063
  interface hash: 86eef239b9ee5bf1f800dcd42fb25540
  ABI hash: 04f0d8036500bd51653411e545868046
  export-list hash: dfcd007ad56f00ff882c926fde9c8485
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: d30a47c87883bd39c2f2bbb396b08e1c
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
  Main.readNumList
  Main.readRealList
  Main.toFloat
  Main.toRealTuple
module dependencies:
package dependencies: Haskell-DSP-0.1.0.0 base-4.12.0.0*
                      ghc-prim-0.5.3 integer-gmp-1.0.2.0 split-0.2.3.3
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  Haskell-DSP-0.1.0.0:HaskDSP 85bbcee0119d935913e3f998be271664
import  -/  base-4.12.0.0:Data.Bits b195a1f45e6ab7d712091491ae581fff
import  -/  base-4.12.0.0:Data.Foldable 00188ddf89c975fee76bdfad479443c1
import  -/  base-4.12.0.0:GHC.Base cc906f98291a1b830546e99a96674547
import  -/  base-4.12.0.0:GHC.List 734a72beb76d276fb4a0ba2689a5711f
import  -/  base-4.12.0.0:GHC.Num 847723f2584d989dac1eada133ac3fb8
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  base-4.12.0.0:System.IO 88c2b1c4079c52d62ed362d4eb9a5302
import  -/  base-4.12.0.0:Text.Read e428ad664707f4e90693a55e6a6b4b1a
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  split-0.2.3.3:Data.List.Split 70c307bcd2f00ca2f2b0b423e205c512
import  -/  split-0.2.3.3:Data.List.Split.Internals 3aa2862d82ede56af6da221c514a77fb
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6ff6573e760b76e6a0406cbde08417d8
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
b8289118b5b24ac4c52b19d580da4028
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main21
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Main.main9 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.List.$wlenAcc
                        @ (GHC.Types.Float, GHC.Types.Float)
                        ipv5
                        0# of ww2 { DEFAULT ->
                 case GHC.Prim.andI# ww2 (GHC.Prim.-# ww2 1#) of wild {
                   DEFAULT
                   -> (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main7
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv4
                   0#
                   -> case GHC.Base.eqString
                             ipv3
                             (GHC.CString.unpackCString# Main.main6) of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString
                                  ipv3
                                  (GHC.CString.unpackCString# Main.main5) of wild2 {
                             GHC.Types.False
                             -> (GHC.IO.Handle.Text.hPutStr'
                                   GHC.IO.Handle.FD.stdout
                                   Main.main3
                                   GHC.Types.True)
                                  `cast`
                                (GHC.Types.N:IO[0] <()>_R)
                                  ipv4
                             GHC.Types.True
                             -> (GHC.IO.Handle.Text.hPutStr'
                                   GHC.IO.Handle.FD.stdout
                                   (GHC.Show.showList__
                                      @ (GHC.Types.Float, GHC.Types.Float)
                                      Main.main2
                                      (HaskDSP.ifft ipv5)
                                      (GHC.Types.[] @ GHC.Types.Char))
                                   GHC.Types.True)
                                  `cast`
                                (GHC.Types.N:IO[0] <()>_R)
                                  ipv4 }
                        GHC.Types.True
                        -> (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              (GHC.Show.showList__
                                 @ (GHC.Types.Float, GHC.Types.Float)
                                 Main.main2
                                 (HaskDSP.fft ipv5)
                                 (GHC.Types.[] @ GHC.Types.Char))
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv4 } } } } } }) -}
97515af4f92bda25bf6fe9e89ba2be3b
  main10 ::
    Data.List.Split.Internals.Chunk GHC.Types.Char -> GHC.Types.Float
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: Data.List.Split.Internals.Chunk
                           GHC.Types.Char) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Float
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Float
                           Main.main13
                           (case x of wild {
                              Data.List.Split.Internals.Delim as -> as
                              Data.List.Split.Internals.Text as -> as })) of wild {
                   [] -> Main.main12
                   : x1 ds
                   -> case ds of wild1 { [] -> x1 : ipv ipv1 -> Main.main11 } }) -}
18aa53edf9a3371a4ead2356cd9140bf
  main11 :: GHC.Types.Float
  {- Strictness: x -}
fa6eb9b63a9094a661512c2650c49dd8
  main12 :: GHC.Types.Float
  {- Strictness: x -}
43e5c2d1a0adab96bbabd6e92f75bb7f
  main13 :: Text.ParserCombinators.ReadP.P GHC.Types.Float
  {- Unfolding: (GHC.Read.$fReadFloat_$sreadNumber
                   GHC.Read.$fReadFloat_$sconvertFrac
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Float
                   (Text.Read.readEither7 @ GHC.Types.Float)) -}
cbbb263ad1496fc563058ce4cbadab3b
  main14 :: [GHC.Types.Char -> GHC.Types.Bool]
  {- Unfolding: (GHC.CString.unpackFoldrCString#
                   @ [GHC.Types.Char -> GHC.Types.Bool]
                   Main.main16
                   Main.main15
                   (GHC.Types.[] @ (GHC.Types.Char -> GHC.Types.Bool))) -}
1d90a23a79fe5398e2daecab436afb06
  main15 ::
    GHC.Types.Char
    -> [GHC.Types.Char -> GHC.Types.Bool]
    -> [GHC.Types.Char -> GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><L,U>m2,
     Unfolding: (\ (x :: GHC.Types.Char)
                   (ys :: [GHC.Types.Char -> GHC.Types.Bool])[OneShot] ->
                 GHC.Types.:
                   @ (GHC.Types.Char -> GHC.Types.Bool)
                   (GHC.Classes.eqChar x)
                   ys) -}
b642436ddeea1616e1e990e4d060d880
  main16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (","#) -}
9508633b06465a1c581af20c44898106
  main17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main18) -}
696d9e97e6c1dacec4f8f541aa0dfb9d
  main18 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Input a list of imaginary floats delimited by \",\""#) -}
03c37615eb23b7c777297327f1e6d2cc
  main19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main20) -}
afaf03418340c0544097d38cb28954f2
  main2 ::
    (GHC.Types.Float, GHC.Types.Float)
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U(1*U(U),1*U(U))><L,U>m2,
     Unfolding: (\ (w3 :: (GHC.Types.Float, GHC.Types.Float))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   (case ww1 of ww4 { GHC.Types.F# ww5 ->
                    GHC.Float.$w$sshowSignedFloat1
                      GHC.Float.$fShowFloat2
                      GHC.Show.$fShow(,)1
                      ww5
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (case ww2 of ww6 { GHC.Types.F# ww7 ->
                          GHC.Show.$fShow(,)_$sgo1
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w4)
                            (GHC.Float.$w$sshowSignedFloat1
                               GHC.Float.$fShowFloat2
                               GHC.Show.$fShow(,)1
                               ww7)
                            (GHC.Types.[] @ GHC.Show.ShowS) })) }) }) -}
c9e1362a34eba364b204e29a5ff25f91
  main20 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Input a list of real floats delimited by \",\""#) -}
d489229a87a0ecfa58e1a132a89d09fa
  main21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main22) -}
81f982b85827d4a2027f38d61c146711
  main22 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Input desired function: fft, ifft"#) -}
b27b320186707be2e313c5202f8a08b6
  main23 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
2de6627c16766616b5365feda650d331
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
62ab01c8c7d4411d90008d0591ee4c5f
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("invalid function"#) -}
d7384e942328c1e4622ab6c9da16b895
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ifft"#) -}
ee2a524cfd98883984cf4727508e7a30
  main6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fft"#) -}
94a288e2eea4b4727dd0d0dc490ea517
  main7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main8) -}
7b9532ed01e5067e7bb69b763ab39746
  main8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("List length must be a power of 2"#) -}
07ed4b56ecf0beee926e680fdc7356d3
  main9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [(GHC.Types.Float, GHC.Types.Float)] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main19
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main17
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 (# ipv6,
                    Main.main_go
                      (Data.List.Split.Internals.$wpostProcess
                         @ GHC.Types.Char
                         Data.List.Split.Internals.Drop
                         Data.List.Split.Internals.KeepBlankFields
                         Data.List.Split.Internals.KeepBlank
                         Data.List.Split.Internals.KeepBlank
                         (Data.List.Split.Internals.splitInternal
                            @ GHC.Types.Char
                            Main.main14
                              `cast`
                            (Sym (Data.List.Split.Internals.N:Delimiter[0] <GHC.Types.Char>_R))
                            ipv3))
                      (GHC.Base.map
                         @ (Data.List.Split.Internals.Chunk GHC.Types.Char)
                         @ GHC.Types.Float
                         Main.main10
                         (Data.List.Split.Internals.$wpostProcess
                            @ GHC.Types.Char
                            Data.List.Split.Internals.Drop
                            Data.List.Split.Internals.KeepBlankFields
                            Data.List.Split.Internals.KeepBlank
                            Data.List.Split.Internals.KeepBlank
                            (Data.List.Split.Internals.splitInternal
                               @ GHC.Types.Char
                               Main.main14
                                 `cast`
                               (Sym (Data.List.Split.Internals.N:Delimiter[0] <GHC.Types.Char>_R))
                               ipv7))) #) } } } }) -}
57bade80ce43c8b875ca0b3077419dda
  main_go ::
    [Data.List.Split.Internals.Chunk GHC.Types.Char]
    -> [GHC.Types.Float] -> [(GHC.Types.Float, GHC.Types.Float)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
87be98676a8cab87d3e2232a2807eb75
  readNumList :: GHC.Types.IO [(GHC.Types.Float, GHC.Types.Float)]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main9
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <[(GHC.Types.Float, GHC.Types.Float)]>_R)) -}
b4a3c535c8a99ea031110ee00d72a146
  readRealList ::
    GHC.Types.IO [(GHC.Types.Float, GHC.Integer.Type.Integer)]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.readRealList1
                  `cast`
                (Sym (GHC.Types.N:IO[0]
                          <[(GHC.Types.Float, GHC.Integer.Type.Integer)]>_R)) -}
79b667a5efec5111cda0aace3ea1723a
  readRealList1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [(GHC.Types.Float, GHC.Integer.Type.Integer)] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main19
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    GHC.Base.map
                      @ (Data.List.Split.Internals.Chunk GHC.Types.Char)
                      @ (GHC.Types.Float, GHC.Integer.Type.Integer)
                      Main.readRealList2
                      (Data.List.Split.Internals.$wpostProcess
                         @ GHC.Types.Char
                         Data.List.Split.Internals.Drop
                         Data.List.Split.Internals.KeepBlankFields
                         Data.List.Split.Internals.KeepBlank
                         Data.List.Split.Internals.KeepBlank
                         (Data.List.Split.Internals.splitInternal
                            @ GHC.Types.Char
                            Main.main14
                              `cast`
                            (Sym (Data.List.Split.Internals.N:Delimiter[0] <GHC.Types.Char>_R))
                            ipv3)) #) } }) -}
5ca153a36b03479b3e91db5210afea22
  readRealList2 ::
    Data.List.Split.Internals.Chunk GHC.Types.Char
    -> (GHC.Types.Float, GHC.Integer.Type.Integer)
  {- Arity: 1, Strictness: <L,1*U>m,
     Unfolding: (\ (x :: Data.List.Split.Internals.Chunk
                           GHC.Types.Char) ->
                 (case Text.Read.readEither8
                         @ GHC.Types.Float
                         (Text.ParserCombinators.ReadP.run
                            @ GHC.Types.Float
                            Main.main13
                            (case x of wild {
                               Data.List.Split.Internals.Delim as -> as
                               Data.List.Split.Internals.Text as -> as })) of wild {
                    [] -> Main.main12
                    : x1 ds
                    -> case ds of wild1 { [] -> x1 : ipv ipv1 -> Main.main11 } },
                  Main.readRealList3)) -}
768c1f106422da334cee123d0d60ff90
  readRealList3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
4498ca7ec0db83f42d37e56838e53efa
  toFloat :: GHC.Base.String -> GHC.Types.Float
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Text.Read.readEither8
                        @ GHC.Types.Float
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Float
                           Main.main13
                           s) of wild {
                   [] -> Main.main12
                   : x ds
                   -> case ds of wild1 { [] -> x : ipv ipv1 -> Main.main11 } }) -}
67d53f7bf4e71c7297daae680ac10824
  toRealTuple ::
    GHC.Num.Num b => GHC.Base.String -> (GHC.Types.Float, b)
  {- Arity: 2, Strictness: <L,1*U(A,A,A,A,A,A,1*C1(U))><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ b (w :: GHC.Num.Num b) (w1 :: GHC.Base.String) ->
                 (case Text.Read.readEither8
                         @ GHC.Types.Float
                         (Text.ParserCombinators.ReadP.run
                            @ GHC.Types.Float
                            Main.main13
                            w1) of wild {
                    [] -> Main.main12
                    : x ds -> case ds of wild1 { [] -> x : ipv ipv1 -> Main.main11 } },
                  GHC.Num.fromInteger @ b w Main.readRealList3)) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

